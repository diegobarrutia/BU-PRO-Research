import numpy as np

# Boltzmann constant (J/K)
K_b = 1.380649e-23
# planck's constant
h_bar = 1.054571817e-34  # Js
# length density (kg/m)
rho = 1.67e-15
# sound velocity (m/s)
v_s = 19900
# deformation potential (J)
D_s = 2.243047191e-18
# length of nanotube (m)
L = 18.83e-10
# confinement length (m)
sigma = 3e-9  # m
# energy of the excited state (Hz)
omega_constant = 1.41 * 1.60218e-19 / h_bar # Hz
# mass of carbon atom
mass_C = 1.99e-26  # kg

# chirality
n = 6
m = 4

# magnitude of unit vector
a = np.sqrt(3) * 1.44e-10  # m

# unit cell length
def L (n, m):
    # d_r
    d_r = np.gcd(2 * m + n, 2 * n + m)  
    return a/d_r * np.sqrt(3 * n ** 2 + 3 * n * m + 3 * m ** 2)

# number of atoms
def N (n,m):
    # d_r
    d_r = np.gcd(2 * m + n, 2 * n + m) 
    return (4 * (n ** 2 + n * m + m ** 2) / d_r) 

def rho (n, m):
    return  N(n,m) * mass_C / L(n,m)

print("Number of Atoms")
print(N(n,m))
print(N(3*n,3*m))
print(N(8*n,8*m))

print("Unit Cell Legth")
print(L(n,m))
print(L(3*n,3*m))
print(L(8*n,8*m))
